import java.io.*;
import java.util.*;

/**
 program to find shortest path using the backtrack search algorithm
 */
public class Main {

	public static void main(String[] args) throws IOException {

		long start = System.currentTimeMillis();

		String inputFileName = args[0]; // input file name
  
		FileReader reader = new FileReader(inputFileName);
		Scanner in = new Scanner(reader);
		
		int floatNode, sinkNode, vWeight;
		int nodeTotal = Integer.parseInt(in.next());

		Graph bGraph = new Graph(nodeTotal);
		for (int i = 0; i<nodeTotal; i++){
		    for (int j = 0; j<nodeTotal; j++){
		    	vWeight = Integer.parseInt(in.next());
		    	if (vWeight != 0){
		    		bGraph.getVertex(i).addToAdjList(j,vWeight);
		    	}
		    }
		}
		floatNode = Integer.parseInt(in.next());
		sinkNode = Integer.parseInt(in.next());

		reader.close();	
		bGraph.bestPath(floatNode, sinkNode, nodeTotal);
		LinkedList<AdjListNode> bestPath = bGraph.getPath();
		
		if (bestPath.peek() == null){
			System.out.println("\nNo route to the sink node could be found");
		}
		else{
		    System.out.println("Shortest distance from vertex " + floatNode + " to vertex " + sinkNode + " is " + bestPath.peek().getWeight());
		    System.out.println("Shortest path: ");
		    while(bestPath.peek()!= null){
		    	AdjListNode next = (AdjListNode) bestPath.remove();
		    	System.out.print(next.getVertexNumber() + " ");
		    }
		// end timer and print total time
			long end = System.currentTimeMillis();
			System.out.println("\nElapsed time: " + (end - start) + " milliseconds");
	}
	}
}
