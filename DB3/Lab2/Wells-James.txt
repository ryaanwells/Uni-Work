Query 1A
SELECT BAND.NAME AS Band_Name, SONG.TITLE AS Song_Title
FROM BAND, SONG, RELEASE 
WHERE BAND.BID = RELEASE.BID AND SONG.RID = RELEASE.RID 
AND SONG.TITLE in
(
    SELECT TITLE
    FROM
    (
        Select TITLE, COUNT(TITLE)
        From Song 
        group by title
        having count(title)>1
    )
)
GROUP BY BAND.NAME, SONG.TITLE
HAVING count(*)>1
ORDER BY BAND.NAME
GO

Query 1B
SELECT DISTINCT BAND.NAME AS Band_Name, S1.TITLE AS Song_Title
  FROM BAND,RELEASE R1,RELEASE R2 ,SONG S1, SONG S2
  WHERE S1.TITLE = S2.TITLE
  AND S1.RID <> S2.RID
  AND R1.RID = S1.RID
  AND R2.RID = S2.RID
  AND BAND.BID = R1.BID
  AND BAND.BID = R2.BID
ORDER BY Band_Name

Query 1C (optimized)
SELECT BAND.NAME AS Band_Name, SONG.TITLE AS Song_Title
FROM BAND, SONG, RELEASE
WHERE BAND.BID=RELEASE.BID AND RELEASE.RID=SONG.RID
GROUP BY BAND.NAME, SONG.TITLE
HAVING count(*)>1
ORDER BY BAND.NAME
GO

Query 2A
SELECT GPLAYERS.NAME AS Band_Name, MAX(BONUSNUM) AS Bonus_Num
FROM
(
    (
        SELECT BAND.NAME, Count(BSONGS.TITLE) AS BONUSNUM
        FROM BAND, RELEASE, 
        (
            SELECT *
            FROM SONG
            WHERE SONG.CDBONUS = 'Y'
        ) BSONGS
        WHERE BAND.BID = RELEASE.BID
        AND RELEASE.RID = BSONGS.RID
        GROUP BY BAND.NAME
        ) 
        UNION 
        ( 
            SELECT BAND.NAME, (0) AS BONUSNUM
            FROM BAND
        )
    ) GPLAYERS
GROUP BY GPLAYERS.NAME

Query 2B
SELECT RESULTS.NAME AS Band_Name, MAX(RESULTS.TOTS) AS Bonus_Num
FROM(
    SELECT BAND.NAME,(0)as TOTS
    FROM BAND
    UNION
    SELECT BAND.NAME, COUNT(SONG.RID)
    FROM BAND, RELEASE, SONG
    WHERE BAND.BID=RELEASE.BID AND RELEASE.RID=SONG.RID AND
SONG.CDBONUS='Y'
    GROUP BY BAND.NAME
    )RESULTS
GROUP BY RESULTS.NAME
GO

Query 2C (optimized)
CREATE INDEX bnames on BAND(NAME)
go
CREATE INDEX bsongs on SONG(CDBONUS)
go
SELECT GPLAYERS.NAME AS Band_Name, MAX(BONUSNUM) AS Bonus_Num
FROM
(
    (
        SELECT BAND.NAME, Count(BSONGS.TITLE) AS BONUSNUM
        FROM BAND, RELEASE, 
        (
            SELECT *
            FROM SONG
            WHERE SONG.CDBONUS = 'Y'
        ) BSONGS
        WHERE BAND.BID = RELEASE.BID
        AND RELEASE.RID = BSONGS.RID
        GROUP BY BAND.NAME
        ) 
        UNION 
        ( 
            SELECT BAND.NAME, (0) AS BONUSNUM
            FROM BAND
        )
    ) GPLAYERS
GROUP BY GPLAYERS.NAME
go

Query 3A
SELECT MEMBER.NAME as Guitarist_Name, Band.Name as Band_Name,
Mems.STARTYEAR as Start_Year, MEMS.ENDYEAR as END_YEAR
FROM MEMBER, BAND,
(
    (
        SELECT BAND.BID,MEMBEROF.MID, MEMBEROF.STARTYEAR As STARTYEAR,
        MEMBEROF.ENDYEAR as ENDYEAR
        FROM MEMBEROF,BAND,RELEASE
        WHERE MEMBEROF.STARTYEAR>0 AND MEMBEROF.INSTRUMENT='guitar'
        AND MEMBEROF.BID=BAND.BID AND BAND.BID=RELEASE.BID
    )
    UNION
    (
        SELECT BAND.BID, MEMBEROF.MID, MIN(RELEASE.YEAR) AS year,
        MEMBEROF.ENDYEAR
        FROM BAND, RELEASE, MEMBEROF
        WHERE BAND.BID=RELEASE.BID AND MEMBEROF.INSTRUMENT='guitar' 
        AND MEMBEROF.BID = BAND.BID AND (MEMBEROF.STARTYEAR IS NULL)
        GROUP BY MEMBEROF.MID, BAND.BID,MEMBEROF.ENDYEAR
    )
) MEMS
WHERE MEMS.MID=MEMBER.MID AND BAND.BID=MEMS.BID
ORDER BY MEMBER.NAME, MEMS.STARTYEAR
go

Query 3B
(
    SELECT MEMBER.NAME AS Guitarist_Name, BAND.NAME AS Band_Name,
    GPLAYERS.STARTYEAR AS Start_Year, GPLAYERS.ENDYEAR AS End_Year
    FROM MEMBER, BAND, 
    (
        SELECT * 
        FROM MEMBEROF 
        WHERE INSTRUMENT='guitar'
    ) GPLAYERS
    WHERE GPLAYERS.STARTYEAR IS NOT NULL
    AND GPLAYERS.MID = MEMBER.MID
    AND GPLAYERS.BID = BAND.BID
) 
UNION
(
    SELECT MEMBER.NAME AS Guitarist_Name, BAND.NAME AS Band_Name,
    FIRSTRELEASE.YEAR AS Start_Year, GPLAYERS.ENDYEAR AS End_Year
    FROM MEMBER, BAND, 
    (
        SELECT * 
        FROM MEMBEROF 
        WHERE INSTRUMENT='guitar'
    ) GPLAYERS, 
    (
        SELECT BID, MIN(RELEASE.YEAR) AS YEAR
        FROM RELEASE
        GROUP BY BID
    ) FIRSTRELEASE
    WHERE GPLAYERS.STARTYEAR IS NULL
    AND GPLAYERS.MID = MEMBER.MID
    AND GPLAYERS.BID = BAND.BID
    AND GPLAYERS.BID = FIRSTRELEASE.BID
)
ORDER BY Guitarist_Name, Start_Year

Query 3C (optimized)
CREATE INDEX syear ON MEMBEROF(STARTYEAR)
go
CREATE INDEX bnames ON BAND(NAME)
go
CREATE INDEX RELEASEBIDS ON RELEASE(BID)
go
SELECT MEMBER.NAME as Guitarist_Name, Band.Name as Band_Name,
Mems.STARTYEAR as Start_Year, MEMS.ENDYEAR as END_YEAR
FROM MEMBER, BAND,
(
    (
        SELECT BAND.BID,MEMBEROF.MID, MEMBEROF.STARTYEAR As STARTYEAR,
        MEMBEROF.ENDYEAR as ENDYEAR
        FROM MEMBEROF,BAND,RELEASE
        WHERE MEMBEROF.STARTYEAR>0 AND MEMBEROF.INSTRUMENT='guitar'
        AND MEMBEROF.BID=BAND.BID AND BAND.BID=RELEASE.BID
    )
    UNION
    (
        SELECT BAND.BID, MEMBEROF.MID, MIN(RELEASE.YEAR) AS year,
        MEMBEROF.ENDYEAR
        FROM BAND, RELEASE, MEMBEROF
        WHERE BAND.BID=RELEASE.BID AND MEMBEROF.INSTRUMENT='guitar' 
        AND MEMBEROF.BID = BAND.BID AND (MEMBEROF.STARTYEAR IS NULL)
        GROUP BY MEMBEROF.MID, BAND.BID,MEMBEROF.ENDYEAR
    )
) MEMS
WHERE MEMS.MID=MEMBER.MID AND BAND.BID=MEMS.BID
ORDER BY MEMBER.NAME, MEMS.STARTYEAR
go

Query 4A
SELECT BAND.NAME AS Band_Name, KPLAYERS.MNAME AS Keyboard_Player
FROM BAND LEFT OUTER JOIN 
(
    SELECT BAND.NAME AS BNAME, MEMBER.NAME AS MNAME 
    FROM BAND, MEMBER, MEMBEROF 
    WHERE MEMBEROF.INSTRUMENT = 'keyboards' 
    AND BAND.BID = MEMBEROF.BID 
    AND MEMBER.MID = MEMBEROF.MID 
    ) KPLAYERS
ON BAND.NAME = KPLAYERS.BNAME 
ORDER BY BAND.NAME

Query 4B
SELECT DISTINCT PLAYERS.BAND_NAME, PLAYERS.Keyboard_Player
FROM MEMBEROF, BAND, 
(
    SELECT BAND.NAME AS Band_Name, KEYS.NAME AS Keyboard_Player
    FROM BAND LEFT OUTER JOIN 
    (
        SELECT MEMBER.NAME,MEMBEROF.BID
        FROM MEMBEROF, MEMBER
        WHERE INSTRUMENT='keyboards' AND MEMBER.MID=MEMBEROF.MID
    )KEYS
ON BAND.BID=KEYS.BID
) PLAYERS
WHERE MEMBEROF.BID = BAND.BID
AND PLAYERS.Band_NAME = BAND.NAME
ORDER BY PLAYERS.BAND_NAME, PLAYERS.Keyboard_Player

Query 4C (optimized)
SELECT BAND.NAME AS Band_Name, KEYS.NAME AS Keyboard_Player
FROM BAND
LEFT OUTER JOIN (
    SELECT MEMBER.NAME,MEMBEROF.BID
    FROM MEMBEROF, MEMBER
    WHERE INSTRUMENT='keyboards' AND MEMBER.MID=MEMBEROF.MID
    )KEYS
ON BAND.BID=KEYS.BID
ORDER BY BAND.NAME, KEYS.NAME

Query 5A
SELECT BAND.NAME as Band_Name, MEMBER.NAME as Singer_Name,
RELEASE.TITLE AS Album_Name, THESONGS.SONG_NUMBER AS Song_Num
FROM RELEASE, MEMBER, MEMBEROF, BAND, 
(
    SELECT ALLSONGS.RID, ALLSONGS.NUM as Song_Number
    FROM 
    (
        SELECT RELEASE.RID as RID, count(SONG.TITLE)as NUM
        FROM RELEASE, SONG
        WHERE RELEASE.RID = SONG.RID
        GROUP BY RELEASE.RID
    ) ALLSONGS
    INNER JOIN
    (
        SELECT MAX(count(SONG.TITLE))as NUM
        FROM RELEASE, SONG
        WHERE RELEASE.RID = SONG.RID
        GROUP BY RELEASE.RID
    ) MAXSONGS 
    ON ALLSONGS.NUM = MAXSONGS.NUM
) THESONGS
WHERE RELEASE.RID = THESONGS.RID
AND RELEASE.BID = BAND.BID 
AND MEMBER.MID = MEMBEROF.MID
AND MEMBEROF.BID = BAND.BID
AND MEMBEROF.INSTRUMENT = 'vocals'

Query 5B
SELECT BAND.NAME AS Band_Name, MEMBER.NAME AS Singer_Name,
RELEASE.TITLE AS Album_Name, MostProlific.Total AS Song_Num
From BAND, RELEASE, MEMBEROF, MEMBER, 
(
    SELECT AlbumTracks.RID, AlbumTracks.Total
    FROM 
    (
        SELECT RELEASE.RID, COUNT(RELEASE.Title) AS total
        FROM RELEASE, SONG
        WHERE RELEASE.RID=SONG.RID 
        GROUP BY RELEASE.RID
        ORDER BY COUNT(RELEASE.Title) DESC
        ) AlbumTracks 
        INNER JOIN 
        (
        SELECT MAX(COUNT(RELEASE.Title)) AS total
        FROM RELEASE, SONG, MEMBEROF
        WHERE RELEASE.RID=SONG.RID AND RELEASE.BID=MEMBEROF.BID 
        AND 
        (   
             RELEASE.YEAR>=MEMBEROF.STARTYEAR 
             OR 
             MEMBEROF.STARTYEAR IS NULL
        )
        AND 
        (
             RELEASE.YEAR<=MEMBEROF.ENDYEAR 
             OR 
             MEMBEROF.ENDYEAR IS NULL
        ) 
        AND MEMBEROF.INSTRUMENT='vocals'
        GROUP BY RELEASE.RID
        ORDER BY COUNT(RELEASE.TITLE) DESC
    ) MostSongs
    ON AlbumTracks.total=MostSongs.total
) MostProlific
WHERE BAND.BID=Release.BID AND Release.RID=MostProlific.RID 
AND MEMBEROF.INSTRUMENT='vocals' AND MEMBEROF.MID=MEMBER.MID
AND (MEMBEROF.STARTYEAR <= Release.YEAR or MEMBEROF.STARTYEAR IS NULL)
AND (MEMBEROF.ENDYEAR >=RELEASE.YEAR OR MEMBEROF.ENDYEAR IS NULL) 
AND MEMBEROF.BID=BAND.BID
go

Query 5C (optimized)
CREATE INDEX meminst on MemberOf(Instrument)
go
/* MostProlific picks the album with the largest number of songs that
   has a singer. This ensures that the album returned HAS a singer on
   the album. This is achieved by finding the number of tracks on the
   album with the most number of tracks that has a singer and then
   inner joining this with all the albums and the number of tracks on
   them. Then the singer is found for these albums.
*/
SELECT BAND.NAME AS Band_Name, MEMBER.NAME AS Singer_Name,
RELEASE.TITLE AS Album_Name, MostProlific.Total AS Song_Num
From BAND, RELEASE, MEMBEROF, MEMBER, 
(
    SELECT AlbumTracks.RID, AlbumTracks.Total
    FROM 
    (
        SELECT RELEASE.RID, COUNT(RELEASE.Title) AS total
        FROM RELEASE, SONG
        WHERE RELEASE.RID=SONG.RID 
        GROUP BY RELEASE.RID
        ORDER BY COUNT(RELEASE.Title) DESC
        ) AlbumTracks 
        INNER JOIN 
        (
        SELECT MAX(COUNT(RELEASE.Title)) AS total
        FROM RELEASE, SONG, MEMBEROF
        WHERE RELEASE.RID=SONG.RID AND RELEASE.BID=MEMBEROF.BID 
        AND 
        (   
             RELEASE.YEAR>=MEMBEROF.STARTYEAR 
             OR 
             MEMBEROF.STARTYEAR IS NULL
        )
        AND 
        (
             RELEASE.YEAR<=MEMBEROF.ENDYEAR 
             OR 
             MEMBEROF.ENDYEAR IS NULL
        ) 
        AND MEMBEROF.INSTRUMENT='vocals'
        GROUP BY RELEASE.RID
        ORDER BY COUNT(RELEASE.TITLE) DESC
    ) MostSongs
    ON AlbumTracks.total=MostSongs.total
) MostProlific
WHERE BAND.BID=Release.BID AND Release.RID=MostProlific.RID 
AND MEMBEROF.INSTRUMENT='vocals' AND MEMBEROF.MID=MEMBER.MID
AND (MEMBEROF.STARTYEAR <= Release.YEAR or MEMBEROF.STARTYEAR IS NULL)
AND (MEMBEROF.ENDYEAR >=RELEASE.YEAR OR MEMBEROF.ENDYEAR IS NULL) 
AND MEMBEROF.BID=BAND.BID
go
